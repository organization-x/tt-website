// Docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Teams that users could be a part of
enum Team {
    Marketing
    Engineering
    Design
    Operations
    Product
    Leadership
    Data
}

// Positions that can be viewed and searched for linked to users
enum Position {
    Frontend
    Backend
    Fullstack
    Designer
    Product_Manager
    Data_Scientist
    Engineer_Manager
    Design_Manager
    Engineer
}

// Enum for soft skills which are only used on users
enum SoftSkill {
    Teamwork
    Leading
    Writing
    Proactive
    Organization
    Communication
    Problem_Solver
    Motivation
    Independent
    Responsible
    Reliable
    Mentor
    Initiative
    Adaptable
    Perserverance
    Meticulous
    Resourceful
}

// Enum for skills that can be "tagged" to users and projects
enum TechSkill {
    JavaScript
    TypeScript
    Python
    React
    TensorFlow
    Pytorch
    Google_Cloud
    AWS
    GraphQL
    Java
    Golang
    Docker
    PHP
    Tailwind
    SQL
    Angular
    Vue
    Node
    Rust
    CSharp
    CPP
    C
    Figma
    Bash
    Deno
    Prisma
    Ruby
    Vercel
    Next
    WebAssembly
    Flutter
    Dart
    Kotlin
    Swift
    Blockchain
    Kubernetes
    DevOps
    CICD
    Nuxt
    Git
    Elixir
    Perl
    Firebase
    Unity
    Digital_Ocean
    Linux
    Nginx
    Heroku
    Mongo
    Postgres
    Redis
    Django
    Flask
    Express
    Remix
    Astro
    Qwik
    Surreal
    Cassandra
    Bun
    Tauri
    Electron
    LaTeX
    Lua
    Haskell
    R
    SupaBase
    Fly
    Railway
    Svelte
    Vite
    Azure
    Bootstrap
    Clojure
    DiscordJS
    Gatsby
    Gradle
    Ionic
    Markdown
    Numpy
    Pandas
    Rails
    Scala
    Solidity
    Terraform
    Zig
    OpenCV
    OpenAI
    Tokio
    Yew
    Tailscale
    Analytics
    CAD
    Networking
    Expo
    React_Native
}

// Enum for user permission roles
enum Role {
    Admin
    Lead
    User
}

// Social links on profiles
model Links {
    GitHub   String?
    LinkedIn String?
    Devto    String?
    Twitter  String?
    Facebook String?
    Website  String?
    user     User    @relation(fields: [userId], references: [id])
    userId   String  @id
}

// A seperate model referencing an author of a project, this way the role the user played and other information can be stored
model ProjectAuthor {
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    project   Project  @relation(fields: [projectId], references: [id])
    projectId String
    position  Position

    @@id([userId, projectId])
}

// A project model for storing information about projects (blog posts)
model Project {
    id          String          @id @default(cuid())
    url         String          @unique
    title       String
    description String
    theme       String // A hex code extracted from the projects banner for theming
    date        DateTime
    skills      TechSkill[]
    authors     ProjectAuthor[]
    ownerId     String
    content     Json // TipTap JSON content
    images      String[]
    visible     Boolean         @default(true)
    pinnedBy    User?

    @@index([title, skills])
}

// Model for storing session tokens
model Session {
    token   String   @id @default(cuid())
    created DateTime @default(now())
    user    User     @relation(fields: [userId], references: [id])
    userId  String
}

// The user model for storing tt members
model User {
    id                   String          @id
    sessions             Session[]
    url                  String          @unique
    role                 Role            @default(User)
    name                 String
    about                String
    team                 Team?
    links                Links?
    positions            Position[]
    softSkills           SoftSkill[]
    techSkills           TechSkill[]
    projects             ProjectAuthor[]
    pinnedProject        Project?        @relation(fields: [pinnedProjectId], references: [id])
    pinnedProjectId      String?         @unique
    visible              Boolean         @default(true)
    endorsementsReceived Endorsement[]   @relation("to")
    endorsementsSent     Endorsement[]   @relation("from")
    lastUpdated          DateTime        @updatedAt
    homepage             Boolean         @default(false) // A boolean representing whether the user has been selected to be on the homepage

    @@index([name, softSkills, techSkills, positions, url])
}

// The endorsement model for storing lead/admin to user endorsements
model Endorsement {
    id        Int        @id @default(autoincrement())
    techSkill TechSkill?
    softSkill SoftSkill?
    to        User       @relation("to", fields: [toId], references: [id])
    toId      String
    from      User       @relation("from", fields: [fromId], references: [id])
    fromId    String
}
