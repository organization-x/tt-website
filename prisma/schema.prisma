// Docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Teams that users could be a part of
enum Team {
    Marketing
    Engineering
    Design
}

// Positions that can be viewed and searched for linked to users
enum Position {
    Frontend
    Backend
    Fullstack
    Designer
}

// Enum for skills that can be "tagged" to users and projects
enum TechSkill {
    JavaScript
    Python
    React
    TensorFlow
    Pytorch
    Google_Cloud
    AWS
}

// Enum for soft skills which are only used on users
enum SoftSkill {
    Teamwork
    Leadership
    Writing
    Proactive
}

// Enum for user permission roles
enum Role {
    Admin
    User
}

// Social links on profiles
model Links {
    GitHub   String?
    LinkedIn String?
    Devto    String?
    Twitter  String?
    Facebook String?
    Website  String?
    user     User    @relation(fields: [userId], references: [id])
    userId   String  @id
}

// A seperate model referencing an author ob a project, this way the role the user played and other information can be stored
model ProjectAuthor {
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    project   Project  @relation(fields: [projectId], references: [id])
    projectId String
    position  Position

    @@id([userId, projectId])
}

// A project model for storing information about projects (blog posts)
model Project {
    id          String          @id @default(cuid())
    url         String          @unique
    title       String
    description String
    // Hex code representing a common color pulled from the banner
    theme       String
    // Contains the projects url basis (name-of-project), structured as /projects/{name-of-project}.
    // For banners we can do /projects/{name-of-project}/banner.webp
    date        DateTime
    skills      TechSkill[]
    authors     ProjectAuthor[]
    ownerId     String
    content     Json // Contains generated tiptap json
    visible     Boolean         @default(true)
    pinnedBy    User?

    @@index([title, skills])
}

// Model for storing session tokens
model Session {
    token   String   @id @default(cuid())
    created DateTime @default(now())
    user    User     @relation(fields: [userId], references: [id])
    userId  String
}

// The user model for storing tt members
model User {
    id              String          @id
    sessions        Session[]
    // Contains the users url basis (firstlast), structured as /users/{firstlast}.
    // For banners and icons we can do /users/{firstlast}/banner.webp and /users/{firstlast}/icon.webp
    url             String          @unique
    role            Role            @default(User)
    name            String
    about           String
    team            Team?
    links           Links?
    positions       Position[]
    softSkills      SoftSkill[]
    techSkills      TechSkill[]
    projects        ProjectAuthor[]
    pinnedProject   Project?        @relation(fields: [pinnedProjectId], references: [id])
    pinnedProjectId String?         @unique
    visible         Boolean         @default(true)

    @@index([name, softSkills, techSkills, positions, url])
}
